// *
// *
// * PRISMA
// *
// *
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// *
// *
// * User and Auth Models
// *
// *

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  personalEmail     String?
  image             String?
  name              String?
  firstName         String?
  preferredName     String?
  lastName          String?
  middleName        String?
  preferredPronouns String?
  manager           User?             @relation(name: "ManagerDirectReports", fields: [managerId], references: [id])
  managerId         String?
  directReports     User[]            @relation(name: "ManagerDirectReports")
  position          Position?         @relation(fields: [positionId], references: [id])
  positionId        String?           @unique
  organization      Organization?     @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId    String?
  department        Department?       @relation(fields: [departmentId], references: [id], onDelete: Restrict)
  departmentId      String?
  createdAt         DateTime          @default(now())
  phone             String?
  phoneAlt          String?
  topReportOf       Department?       @relation(name: "DepartmentTopReport")
  accounts          Account[]
  sessions          Session[]
  assets            Asset[]
  assetHistory      AssetAssignment[]
  positionHistory   PositionHistory[]
  // --onboarding info
  // --contact info
  //    internal email
  //    personal email
  //    main phone
  //    alt phone
  //    preferred contact method
  //    personal website
  //    bio
  //    address
  //
  // --company access
  // --labor profile
  // --external services
  // --certifications
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// *
// *
// * Company / Organization related schema
// *
// *

model Organization {
  id    String @id @default(cuid())
  name  String
  users User[]
}

model Building {
  id   String @id @default(cuid())
  name String
  // BUILDING INFORMATION
}

model Department {
  id          String     @id @default(cuid())
  name        String
  code        String
  topReport   User       @relation(name: "DepartmentTopReport", fields: [topReportId], references: [id])
  topReportId String     @unique
  divisions   Division[]
  positions   Position[]
  employees   User[]
}

model Division {
  id           String     @id @default(cuid())
  name         String
  code         String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
}

model Program {
  id   String @id @default(cuid())
  name String
  code String
}

// *
// *
// * Employee Lifecycle Related Schema
// *
// *

model Applicant {
  id              String      @id @default(cuid())
  email           String      @unique
  name            String
  appliedOn       DateTime    @default(now())
  status          String      @default("UNSEEN")
  resume          String?
  coverLetter     String?
  internalNotes   String?
  rating          Int?
  currentEmployee Boolean     @default(false)
  interviews      Interview[]
  interestedIn    Position[]
}

model Interview {
  id          String    @id @default(cuid())
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId String
  datetime    DateTime
  duration    Int
  accepted    Boolean   @default(false)
  completed   Boolean   @default(false)
  notes       String
  position    Position  @relation(fields: [positionId], references: [id])
  positionId  String
  // interviewers User[]
}

model Position {
  id                   String            @id @default(cuid())
  name                 String
  department           Department        @relation(fields: [departmentId], references: [id])
  departmentId         String
  active               Boolean           @default(true)
  posted               Boolean           @default(false)
  employee             User?
  employeeHistory      PositionHistory[]
  interviewHistory     Interview[]
  interestedApplicants Applicant[]
}

model PositionHistory {
  id         String   @id @default(cuid())
  active     Boolean  @default(true)
  position   Position @relation(fields: [positionId], references: [id])
  positionId String
  employee   User     @relation(fields: [employeeId], references: [id])
  employeeId String
}

// * Enumerations (For when SQLite is replaced)

// enum ApplicantStatus {
//   UNSEEN
//   CONTACTED
//   INTERVIEWING
//   OFFER_PENDING
//   HIRED
//   NON_HIRE
// }

// *
// *
// * Asset Related Schema
// *
// *

model Asset {
  id             String            @id @default(cuid())
  name           String            @unique
  description    String?
  imageUrl       String?
  type           String
  brand          String
  serialNumber   String
  purchase       AssetPurchase     @relation(fields: [purchaseId], references: [id])
  purchaseId     String            @unique
  assignedTo     User?             @relation(fields: [assignedToId], references: [id])
  assignedToId   String?
  ownerHistory   AssetAssignment[]
  condition      String            @default("NEW")
  conditionNotes String?
  status         String            @default("available")
}

model AssetAssignment {
  id         String    @id @default(cuid())
  asset      Asset     @relation(fields: [assetId], references: [id])
  assetId    String
  owner      User      @relation(fields: [ownerId], references: [id])
  ownerId    String
  assignedAt DateTime  @default(now())
  returnedAt DateTime?
  active     Boolean   @default(true)
}

model AssetPurchase {
  id            String    @id @default(cuid())
  asset         Asset?
  purchaseDate  DateTime
  receivedDate  DateTime?
  orderNumber   String
  purchasePrice Int
  purchasedFrom String
}

// * Enumerations (For when SQLite is replaced)

// enum ConditionStatus {
//   DAMAGED
//   VERY_POOR
//   WORN
//   AVERAGE
//   GOOD
//   EXCELLENT
//   NEW
// }

// enum AssetStatus {
//   RECYCLED
//   DONATED
//   ASSIGNED
//   AVAILABLE
//   REPAIR
//   LOST
//   ORDERED
// }

// enum AssetType {
//   LAPTOP
//   DESKTOP
//   TABLET
//   CELL_PHONE
//   OFFICE_PHONE
//   SOFTWARE
//   LICENSE
// }
