// *
// *
// * PRISMA
// *
// *
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// *
// *
// * USER
// *
// *
model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  emailVerified           Boolean?                  @default(false)
  personalEmail           String?
  image                   String?
  name                    String?
  firstName               String?
  preferredName           String?
  lastName                String?
  middleName              String?
  preferredPronouns       String?
  createdAt               DateTime                  @default(now())
  // * auth
  accounts                Account[]
  sessions                Session[]
  // * employee
  manager                 User?                     @relation(name: "ManagerDirectReports", fields: [managerId], references: [id])
  managerId               String?
  directReports           User[]                    @relation(name: "ManagerDirectReports")
  position                Position?                 @relation(fields: [positionId], references: [id])
  positionId              String?                   @unique
  positionHistory         PositionHistory[]
  organization            Organization?             @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId          String?
  department              Department?               @relation(fields: [departmentId], references: [id], onDelete: Restrict)
  departmentId            String?
  topReportOf             Department?               @relation(name: "DepartmentTopReport")
  // * contact info
  phone                   String?
  phoneAlt                String?
  preferredContactMethods PreferredContactMethods[]
  personalWebsite         String?
  bio                     String?
  address                 String? // ! change
  // * certifications
  // * asset assignment
  assets                  Asset[]
  assetHistory            AssetAssignment[]
  // * onboarding info
  isNewHire               Boolean                   @default(true) // ! cron job to check everday against end of onboarding, switch to false
  onboardingProcess       OnboardingProcess?        @relation(fields: [onboardingProcessId], references: [id])
  onboardingProcessId     String?                   @unique // ! required
  startDate               DateTime? // ! required
  onboardingTasks         OnboardingTask[]
  // * company access
  // * labor profile
  hireDate                DateTime                  @default(now())
  laborStatus             LaborStatus?
  // * external services
}

enum PreferredContactMethods {
  EMAIL
  PHONE
  TEXT
}

// *
// *
// * AUTH
// *
// *
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// *
// *
// * COMPANY / ORGANIZATION
// *
// *
model Organization {
  id        String @id @default(cuid())
  name      String
  employees User[]
}

model Building {
  id   String @id @default(cuid())
  name String
}

model Department {
  id          String     @id @default(cuid())
  name        String
  code        String
  topReport   User       @relation(name: "DepartmentTopReport", fields: [topReportId], references: [id])
  topReportId String     @unique
  divisions   Division[]
  positions   Position[]
  employees   User[]
}

model Division {
  id           String     @id @default(cuid())
  name         String
  code         String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
}

model Program {
  id   String @id @default(cuid())
  name String
  code String
}

// *
// *
// * LABOR PROFILE
// *
// *
enum LaborStatus {
  FULL_TIME
  PART_TIME
  CONTRACT
  SEASONAL
  TEMPORARY
}

// staffing groups (matched to paycom labor allocation profiles)
// tax info and filing status etc
// schedules
// availability
// requests off
// shifts missed
// issues or concerns
// employee coding
// current labor allocations profiles

// *
// *
// * EMPLOYEE LIFECYCLE [APPLICANT]
// *
// *
model Applicant {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String
  appliedOn         DateTime            @default(now())
  status            ApplicantStatus     @default(UNSEEN)
  resume            String?
  coverLetter       String?
  internalNotes     String?
  rating            Int?
  currentEmployee   Boolean             @default(false)
  interviews        Interview[]
  interestedIn      Position[]
  OnboardingProcess OnboardingProcess[]
}

enum ApplicantStatus {
  UNSEEN
  CONTACTED
  INTERVIEWING
  OFFER_PENDING
  HIRED
  NON_HIRE
}

model Interview {
  id          String    @id @default(cuid())
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId String
  datetime    DateTime
  duration    Int
  accepted    Boolean   @default(false)
  completed   Boolean   @default(false)
  notes       String
  position    Position  @relation(fields: [positionId], references: [id])
  positionId  String
  // interviewers User[]
}

model Position {
  id                    String               @id @default(cuid())
  name                  String
  overview              String?
  // internal
  department            Department           @relation(fields: [departmentId], references: [id])
  departmentId          String
  active                Boolean              @default(true)
  employee              User?
  employeeHistory       PositionHistory[]
  supervisingPosition   Position?            @relation(name: "SupervisorSubordinatePositions", fields: [supervisingPositionId], references: [id]) // ! required
  supervisingPositionId String? // ! required
  subordinatePositions  Position[]           @relation(name: "SupervisorSubordinatePositions")
  // applicant process
  posted                Boolean              @default(false)
  interviewHistory      Interview[]
  interestedApplicants  Applicant[]
  // onboarding
  onboardingTeams       OnboardingTemplate[]
  onboardingTasks       OnboardingTask[]
  // labor profile
  laborStatus           LaborStatus?
  salaryRangeLow        Int?
  salaryRangeHigh       Int?
}

model PositionHistory {
  id         String   @id @default(cuid())
  active     Boolean  @default(true)
  position   Position @relation(fields: [positionId], references: [id])
  positionId String
  employee   User     @relation(fields: [employeeId], references: [id])
  employeeId String
}

// *
// *
// * EMPLOYEE LIFECYCLE [ONBOARDING]
// *
// *
model OnboardingTemplate {
  id              String                   @id @default(cuid())
  name            String // full-time, part-time instructor, part-time admin, etc
  description     String?
  onboardingTeam  Position[]
  onboardingTasks OnboardingTaskTemplate[]
}

model OnboardingProcess {
  id                    String           @id @default(cuid())
  employee              User?
  applicant             Applicant        @relation(fields: [applicantId], references: [id])
  applicantId           String
  employeeStartDate     DateTime
  onboardingBeginDate   DateTime
  status                OnboardingStatus
  statusNotes           String?
  paperworkSent         Boolean
  paperworkSentDate     DateTime?
  paperworkReceived     Boolean
  paperworkReceivedDate DateTime?
  userSetup             Boolean
  tasks                 OnboardingTask[]
  // etc...
}

enum OnboardingStatus {
  UNSCHEDULED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  PAUSED
  WARNING
  OVERDUE
  TERMINATED
}

model OnboardingTaskTemplate {
  id                  String               @id @default(cuid())
  onboardingTemplates OnboardingTemplate[]
}

model OnboardingTask {
  id                  String            @id @default(cuid())
  onboardingProcess   OnboardingProcess @relation(fields: [onboardingProcessId], references: [id])
  onboardingProcessId String
  name                String
  assignedTo          User              @relation(fields: [userId], references: [id])
  assignedToPosition  Position          @relation(fields: [positionId], references: [id])
  status              TaskStatus
  startDate           DateTime?
  dueDate             DateTime?
  completedDate       DateTime?
  active              Boolean           @default(true)

  userId     String
  positionId String
}

enum TaskStatus {
  UNSCHEDULED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  PAUSED
  WARNING
  OVERDUE
  TERMINATED
}

// existing skills
// internal qualifications
// trainings required
// trainings in progress
// certifications/background clearances

// *
// *
// * Asset Related Schema
// *
// *

model Asset {
  id             String            @id @default(cuid())
  name           String            @unique
  description    String?
  imageUrl       String?
  type           AssetType
  brand          String
  serialNumber   String
  purchase       AssetPurchase     @relation(fields: [purchaseId], references: [id])
  purchaseId     String            @unique
  assignedTo     User?             @relation(fields: [assignedToId], references: [id])
  assignedToId   String?
  ownerHistory   AssetAssignment[]
  condition      ConditionStatus   @default(NEW)
  conditionNotes String?
  status         AssetStatus       @default(AVAILABLE)
}

enum AssetStatus {
  RECYCLED
  DONATED
  ASSIGNED
  AVAILABLE
  REPAIR
  LOST
  ORDERED
}

enum AssetType {
  LAPTOP
  DESKTOP
  TABLET
  CELL_PHONE
  OFFICE_PHONE
  SOFTWARE
  LICENSE
}

enum ConditionStatus {
  DAMAGED
  VERY_POOR
  WORN
  AVERAGE
  GOOD
  EXCELLENT
  NEW
}

model AssetAssignment {
  id         String    @id @default(cuid())
  asset      Asset     @relation(fields: [assetId], references: [id])
  assetId    String
  owner      User      @relation(fields: [ownerId], references: [id])
  ownerId    String
  assignedAt DateTime  @default(now())
  returnedAt DateTime?
  active     Boolean   @default(true)
}

model AssetPurchase {
  id            String    @id @default(cuid())
  asset         Asset?
  purchaseDate  DateTime
  receivedDate  DateTime?
  orderNumber   String
  purchasePrice Int
  purchasedFrom String
}
